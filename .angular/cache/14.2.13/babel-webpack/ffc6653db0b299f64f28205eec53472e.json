{"ast":null,"code":"import _createClass from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { Injectable, ɵɵdefineInjectable, forwardRef, EventEmitter, Component, ElementRef, ChangeDetectorRef, Input, Output, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * Provides default values for Pagination and pager components\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nvar _c0 = function _c0(a0, a1) {\n  return {\n    \"pull-left\": a0,\n    \"float-left\": a1\n  };\n};\n\nvar _c1 = function _c1(a0, a1) {\n  return {\n    \"pull-right\": a0,\n    \"float-right\": a1\n  };\n};\n\nvar _c2 = function _c2(a0, a1) {\n  return {\n    disabled: a0,\n    currentPage: a1\n  };\n};\n\nfunction PaginationComponent_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r16 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 11)(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_1_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r16);\n      var ctx_r15 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r15.selectPage(1, $event));\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    var _r11 = ɵngcc0.ɵɵreference(13);\n\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r0.noPrevious() || ctx_r0.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.customFirstTemplate || _r11)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r0.noPrevious() || ctx_r0.disabled, ctx_r0.page));\n  }\n}\n\nfunction PaginationComponent_li_2_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r18 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 14)(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_2_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r18);\n      var ctx_r17 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r17.selectPage(ctx_r17.page - 1, $event));\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n\n    var _r9 = ɵngcc0.ɵɵreference(11);\n\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r1.noPrevious() || ctx_r1.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.customPreviousTemplate || _r9)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r1.noPrevious() || ctx_r1.disabled, ctx_r1.page));\n  }\n}\n\nvar _c3 = function _c3(a0, a1, a2) {\n  return {\n    disabled: a0,\n    $implicit: a1,\n    currentPage: a2\n  };\n};\n\nfunction PaginationComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r21 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 15)(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_3_Template_a_click_1_listener($event) {\n      var restoredCtx = ɵngcc0.ɵɵrestoreView(_r21);\n      var pg_r19 = restoredCtx.$implicit;\n      var ctx_r20 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r20.selectPage(pg_r19.number, $event));\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var pg_r19 = ctx.$implicit;\n    var ctx_r2 = ɵngcc0.ɵɵnextContext();\n\n    var _r5 = ɵngcc0.ɵɵreference(7);\n\n    ɵngcc0.ɵɵclassProp(\"active\", pg_r19.active)(\"disabled\", ctx_r2.disabled && !pg_r19.active);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r2.customPageTemplate || _r5)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction3(6, _c3, ctx_r2.disabled, pg_r19, ctx_r2.page));\n  }\n}\n\nfunction PaginationComponent_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r23 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 16)(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_4_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r23);\n      var ctx_r22 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r22.selectPage(ctx_r22.page + 1, $event));\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r3 = ɵngcc0.ɵɵnextContext();\n\n    var _r7 = ɵngcc0.ɵɵreference(9);\n\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r3.noNext() || ctx_r3.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r3.customNextTemplate || _r7)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r3.noNext() || ctx_r3.disabled, ctx_r3.page));\n  }\n}\n\nfunction PaginationComponent_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    var _r25 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\", 17)(1, \"a\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function PaginationComponent_li_5_Template_a_click_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r25);\n      var ctx_r24 = ɵngcc0.ɵɵnextContext();\n      return ɵngcc0.ɵɵresetView(ctx_r24.selectPage(ctx_r24.totalPages, $event));\n    });\n    ɵngcc0.ɵɵelementContainer(2, 13);\n    ɵngcc0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    var ctx_r4 = ɵngcc0.ɵɵnextContext();\n\n    var _r13 = ɵngcc0.ɵɵreference(15);\n\n    ɵngcc0.ɵɵclassProp(\"disabled\", ctx_r4.noNext() || ctx_r4.disabled);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.customLastTemplate || _r13)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction2(4, _c2, ctx_r4.noNext() || ctx_r4.disabled, ctx_r4.page));\n  }\n}\n\nfunction PaginationComponent_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var page_r26 = ctx.$implicit;\n    ɵngcc0.ɵɵtextInterpolate(page_r26.text);\n  }\n}\n\nfunction PaginationComponent_ng_template_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r8 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r8.getText(\"next\"));\n  }\n}\n\nfunction PaginationComponent_ng_template_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r10 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r10.getText(\"previous\"));\n  }\n}\n\nfunction PaginationComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r12 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r12.getText(\"first\"));\n  }\n}\n\nfunction PaginationComponent_ng_template_14_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtext(0);\n  }\n\n  if (rf & 2) {\n    var ctx_r14 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵtextInterpolate(ctx_r14.getText(\"last\"));\n  }\n}\n\nvar PaginationConfig = /*#__PURE__*/(function () {\n  var PaginationConfig = /*#__PURE__*/_createClass(function PaginationConfig() {\n    _classCallCheck(this, PaginationConfig);\n\n    this.main = {\n      maxSize: void 0,\n      itemsPerPage: 10,\n      boundaryLinks: false,\n      directionLinks: true,\n      firstText: 'First',\n      previousText: 'Previous',\n      nextText: 'Next',\n      lastText: 'Last',\n      pageBtnClass: '',\n      rotate: true\n    };\n    this.pager = {\n      itemsPerPage: 15,\n      previousText: '« Previous',\n      nextText: 'Next »',\n      pageBtnClass: '',\n      align: true\n    };\n  });\n\n  PaginationConfig.ɵfac = function PaginationConfig_Factory(t) {\n    return new (t || PaginationConfig)();\n  };\n  /** @nocollapse */\n\n\n  PaginationConfig.ɵprov = ɵɵdefineInjectable({\n    factory: function PaginationConfig_Factory() {\n      return new PaginationConfig();\n    },\n    token: PaginationConfig,\n    providedIn: \"root\"\n  });\n  return PaginationConfig;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  PaginationConfig.prototype.main;\n  /** @type {?} */\n\n  PaginationConfig.prototype.pager;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/** @type {?} */\n\n\nvar PAGER_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return PagerComponent;\n  }),\n  multi: true\n};\nvar PagerComponent = /*#__PURE__*/(function () {\n  var PagerComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} paginationConfig\n     * @param {?} changeDetection\n     */\n    function PagerComponent(elementRef, paginationConfig, changeDetection) {\n      _classCallCheck(this, PagerComponent);\n\n      this.elementRef = elementRef;\n      this.changeDetection = changeDetection;\n      /**\n       * fired when total pages count changes, $event:number equals to total pages count\n       */\n\n      this.numPages = new EventEmitter();\n      /**\n       * fired when page was changed, $event:{page, itemsPerPage} equals to\n       * object with current page index and number of items per page\n       */\n\n      this.pageChanged = new EventEmitter();\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n      this.inited = false;\n      this._page = 1;\n      this.elementRef = elementRef;\n\n      if (!this.config) {\n        this.configureOptions(Object.assign({}, paginationConfig.main, paginationConfig.pager));\n      }\n    }\n    /**\n     * maximum number of items per page. If value less than 1 will display all items on one page\n     * @return {?}\n     */\n\n\n    _createClass(PagerComponent, [{\n      key: \"itemsPerPage\",\n      get: function get() {\n        return this._itemsPerPage;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._itemsPerPage = v;\n        this.totalPages = this.calculateTotalPages();\n      }\n      /**\n       * total number of items in all pages\n       * @return {?}\n       */\n\n    }, {\n      key: \"totalItems\",\n      get: function get() {\n        return this._totalItems;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._totalItems = v;\n        this.totalPages = this.calculateTotalPages();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"totalPages\",\n      get: function get() {\n        return this._totalPages;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._totalPages = v;\n        this.numPages.emit(v);\n\n        if (this.inited) {\n          this.selectPage(this.page);\n        }\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"page\",\n      get:\n      /**\n       * @return {?}\n       */\n      function get() {\n        return this._page;\n      }\n      /**\n       * @param {?} config\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        /** @type {?} */\n        var _previous = this._page;\n        this._page = value > this.totalPages ? this.totalPages : value || 1;\n        this.changeDetection.markForCheck();\n\n        if (_previous === this._page || typeof _previous === 'undefined') {\n          return;\n        }\n\n        this.pageChanged.emit({\n          page: this._page,\n          itemsPerPage: this.itemsPerPage\n        });\n      }\n    }, {\n      key: \"configureOptions\",\n      value: function configureOptions(config) {\n        this.config = Object.assign({}, config);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (typeof window !== 'undefined') {\n          this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n        } // watch for maxSize\n\n\n        this.maxSize = typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n        this.rotate = typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n        this.boundaryLinks = typeof this.boundaryLinks !== 'undefined' ? this.boundaryLinks : this.config.boundaryLinks;\n        this.directionLinks = typeof this.directionLinks !== 'undefined' ? this.directionLinks : this.config.directionLinks;\n        this.pageBtnClass = typeof this.pageBtnClass !== 'undefined' ? this.pageBtnClass : this.config.pageBtnClass; // base class\n\n        this.itemsPerPage = typeof this.itemsPerPage !== 'undefined' ? this.itemsPerPage : this.config.itemsPerPage;\n        this.totalPages = this.calculateTotalPages(); // this class\n\n        this.pages = this.getPages(this.page, this.totalPages);\n        this.inited = true;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.page = value;\n        this.pages = this.getPages(this.page, this.totalPages);\n      }\n      /**\n       * @param {?} key\n       * @return {?}\n       */\n\n    }, {\n      key: \"getText\",\n      value: function getText(key) {\n        // tslint:disable-next-line:no-any\n        return (\n          /** @type {?} */\n          this[\"\".concat(key, \"Text\")] ||\n          /** @type {?} */\n          this.config[\"\".concat(key, \"Text\")]\n        );\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"noPrevious\",\n      value: function noPrevious() {\n        return this.page === 1;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"noNext\",\n      value: function noNext() {\n        return this.page === this.totalPages;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} page\n       * @param {?=} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"selectPage\",\n      value: function selectPage(page, event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        if (!this.disabled) {\n          if (event && event.target) {\n            // tslint:disable-next-line:no-any\n\n            /** @type {?} */\n            var target = event.target;\n            target.blur();\n          }\n\n          this.writeValue(page);\n          this.onChange(this.page);\n        }\n      } // Create page object used in template\n\n      /**\n       * @protected\n       * @param {?} num\n       * @param {?} text\n       * @param {?} active\n       * @return {?}\n       */\n\n    }, {\n      key: \"makePage\",\n      value: function makePage(num, text, active) {\n        return {\n          text: text,\n          number: num,\n          active: active\n        };\n      }\n      /**\n       * @protected\n       * @param {?} currentPage\n       * @param {?} totalPages\n       * @return {?}\n       */\n\n    }, {\n      key: \"getPages\",\n      value: function getPages(currentPage, totalPages) {\n        /** @type {?} */\n        var pages = []; // Default page limits\n\n        /** @type {?} */\n\n        var startPage = 1;\n        /** @type {?} */\n\n        var endPage = totalPages;\n        /** @type {?} */\n\n        var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages; // recompute if maxSize\n\n        if (isMaxSized) {\n          if (this.rotate) {\n            // Current page is displayed in the middle of the visible ones\n            startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n            endPage = startPage + this.maxSize - 1; // Adjust if limit is exceeded\n\n            if (endPage > totalPages) {\n              endPage = totalPages;\n              startPage = endPage - this.maxSize + 1;\n            }\n          } else {\n            // Visible pages are paginated with maxSize\n            startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1; // Adjust last page if limit is exceeded\n\n            endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n          }\n        } // Add page number links\n\n\n        for (var num = startPage; num <= endPage; num++) {\n          /** @type {?} */\n          var page = this.makePage(num, num.toString(), num === currentPage);\n          pages.push(page);\n        } // Add links to move between page sets\n\n\n        if (isMaxSized && !this.rotate) {\n          if (startPage > 1) {\n            /** @type {?} */\n            var previousPageSet = this.makePage(startPage - 1, '...', false);\n            pages.unshift(previousPageSet);\n          }\n\n          if (endPage < totalPages) {\n            /** @type {?} */\n            var nextPageSet = this.makePage(endPage + 1, '...', false);\n            pages.push(nextPageSet);\n          }\n        }\n\n        return pages;\n      } // base class\n\n      /**\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"calculateTotalPages\",\n      value: function calculateTotalPages() {\n        /** @type {?} */\n        var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);\n        return Math.max(totalPages || 0, 1);\n      }\n    }]);\n\n    return PagerComponent;\n  }();\n\n  PagerComponent.ɵfac = function PagerComponent_Factory(t) {\n    return new (t || PagerComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PaginationConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  PagerComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PagerComponent,\n    selectors: [[\"pager\"]],\n    inputs: {\n      itemsPerPage: \"itemsPerPage\",\n      totalItems: \"totalItems\",\n      maxSize: \"maxSize\",\n      rotate: \"rotate\",\n      boundaryLinks: \"boundaryLinks\",\n      directionLinks: \"directionLinks\",\n      pageBtnClass: \"pageBtnClass\",\n      align: \"align\",\n      firstText: \"firstText\",\n      previousText: \"previousText\",\n      nextText: \"nextText\",\n      lastText: \"lastText\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      numPages: \"numPages\",\n      pageChanged: \"pageChanged\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([PAGER_CONTROL_VALUE_ACCESSOR])],\n    decls: 7,\n    vars: 24,\n    consts: [[1, \"pager\"], [3, \"ngClass\"], [\"href\", \"\", 3, \"click\"]],\n    template: function PagerComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0)(1, \"li\", 1)(2, \"a\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function PagerComponent_Template_a_click_2_listener($event) {\n          return ctx.selectPage(ctx.page - 1, $event);\n        });\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd()();\n        ɵngcc0.ɵɵelementStart(4, \"li\", 1)(5, \"a\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function PagerComponent_Template_a_click_5_listener($event) {\n          return ctx.selectPage(ctx.page + 1, $event);\n        });\n        ɵngcc0.ɵɵtext(6);\n        ɵngcc0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.noPrevious())(\"previous\", ctx.align);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(18, _c0, ctx.align, ctx.align));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.getText(\"previous\"));\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassMap(ctx.pageBtnClass);\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.noNext())(\"next\", ctx.align);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction2(21, _c1, ctx.align, ctx.align));\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.getText(\"next\"));\n      }\n    },\n    dependencies: [ɵngcc1.NgClass],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return PagerComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  PagerComponent.prototype.config;\n  /**\n   * if `true` aligns each link to the sides of pager\n   * @type {?}\n   */\n\n  PagerComponent.prototype.align;\n  /**\n   * limit number for page links in pager\n   * @type {?}\n   */\n\n  PagerComponent.prototype.maxSize;\n  /**\n   * if false first and last buttons will be hidden\n   * @type {?}\n   */\n\n  PagerComponent.prototype.boundaryLinks;\n  /**\n   * if false previous and next buttons will be hidden\n   * @type {?}\n   */\n\n  PagerComponent.prototype.directionLinks;\n  /**\n   * first button text\n   * @type {?}\n   */\n\n  PagerComponent.prototype.firstText;\n  /**\n   * previous button text\n   * @type {?}\n   */\n\n  PagerComponent.prototype.previousText;\n  /**\n   * next button text\n   * @type {?}\n   */\n\n  PagerComponent.prototype.nextText;\n  /**\n   * last button text\n   * @type {?}\n   */\n\n  PagerComponent.prototype.lastText;\n  /**\n   * if true current page will in the middle of pages list\n   * @type {?}\n   */\n\n  PagerComponent.prototype.rotate;\n  /**\n   * add class to <code><li\\></code>\n   * @type {?}\n   */\n\n  PagerComponent.prototype.pageBtnClass;\n  /**\n   * if true pagination component will be disabled\n   * @type {?}\n   */\n\n  PagerComponent.prototype.disabled;\n  /**\n   * fired when total pages count changes, $event:number equals to total pages count\n   * @type {?}\n   */\n\n  PagerComponent.prototype.numPages;\n  /**\n   * fired when page was changed, $event:{page, itemsPerPage} equals to\n   * object with current page index and number of items per page\n   * @type {?}\n   */\n\n  PagerComponent.prototype.pageChanged;\n  /** @type {?} */\n\n  PagerComponent.prototype.onChange;\n  /** @type {?} */\n\n  PagerComponent.prototype.onTouched;\n  /** @type {?} */\n\n  PagerComponent.prototype.classMap;\n  /** @type {?} */\n\n  PagerComponent.prototype.pages;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype._itemsPerPage;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype._totalItems;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype._totalPages;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype.inited;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PagerComponent.prototype._page;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PagerComponent.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PagerComponent.prototype.changeDetection;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @record\n */\n\n\nfunction PageChangedEvent() {}\n\nif (false) {\n  /** @type {?} */\n  PageChangedEvent.prototype.itemsPerPage;\n  /** @type {?} */\n\n  PageChangedEvent.prototype.page;\n}\n/** @type {?} */\n\n\nvar PAGINATION_CONTROL_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n\n  /* tslint:disable-next-line: no-use-before-declare */\n  useExisting: forwardRef(\n  /**\n  * @return {?}\n  */\n  function () {\n    return PaginationComponent;\n  }),\n  multi: true\n};\nvar PaginationComponent = /*#__PURE__*/(function () {\n  var PaginationComponent = /*#__PURE__*/function () {\n    /**\n     * @param {?} elementRef\n     * @param {?} paginationConfig\n     * @param {?} changeDetection\n     */\n    function PaginationComponent(elementRef, paginationConfig, changeDetection) {\n      _classCallCheck(this, PaginationComponent);\n\n      this.elementRef = elementRef;\n      this.changeDetection = changeDetection;\n      /**\n       * fired when total pages count changes, $event:number equals to total pages count\n       */\n\n      this.numPages = new EventEmitter();\n      /**\n       * fired when page was changed, $event:{page, itemsPerPage} equals to object\n       * with current page index and number of items per page\n       */\n\n      this.pageChanged = new EventEmitter();\n      this.onChange = Function.prototype;\n      this.onTouched = Function.prototype;\n      this.inited = false;\n      this._page = 1;\n      this.elementRef = elementRef;\n\n      if (!this.config) {\n        this.configureOptions(paginationConfig.main);\n      }\n    }\n    /**\n     * maximum number of items per page. If value less than 1 will display all items on one page\n     * @return {?}\n     */\n\n\n    _createClass(PaginationComponent, [{\n      key: \"itemsPerPage\",\n      get: function get() {\n        return this._itemsPerPage;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._itemsPerPage = v;\n        this.totalPages = this.calculateTotalPages();\n      }\n      /**\n       * total number of items in all pages\n       * @return {?}\n       */\n\n    }, {\n      key: \"totalItems\",\n      get: function get() {\n        return this._totalItems;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._totalItems = v;\n        this.totalPages = this.calculateTotalPages();\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"totalPages\",\n      get: function get() {\n        return this._totalPages;\n      }\n      /**\n       * @param {?} v\n       * @return {?}\n       */\n      ,\n      set: function set(v) {\n        this._totalPages = v;\n        this.numPages.emit(v);\n\n        if (this.inited) {\n          this.selectPage(this.page);\n        }\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"page\",\n      get:\n      /**\n       * @return {?}\n       */\n      function get() {\n        return this._page;\n      }\n      /**\n       * @param {?} config\n       * @return {?}\n       */\n      ,\n      set: function set(value) {\n        /** @type {?} */\n        var _previous = this._page;\n        this._page = value > this.totalPages ? this.totalPages : value || 1;\n        this.changeDetection.markForCheck();\n\n        if (_previous === this._page || typeof _previous === 'undefined') {\n          return;\n        }\n\n        this.pageChanged.emit({\n          page: this._page,\n          itemsPerPage: this.itemsPerPage\n        });\n      }\n    }, {\n      key: \"configureOptions\",\n      value: function configureOptions(config) {\n        this.config = Object.assign({}, config);\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        if (typeof window !== 'undefined') {\n          this.classMap = this.elementRef.nativeElement.getAttribute('class') || '';\n        } // watch for maxSize\n\n\n        this.maxSize = typeof this.maxSize !== 'undefined' ? this.maxSize : this.config.maxSize;\n        this.rotate = typeof this.rotate !== 'undefined' ? this.rotate : this.config.rotate;\n        this.boundaryLinks = typeof this.boundaryLinks !== 'undefined' ? this.boundaryLinks : this.config.boundaryLinks;\n        this.directionLinks = typeof this.directionLinks !== 'undefined' ? this.directionLinks : this.config.directionLinks;\n        this.pageBtnClass = typeof this.pageBtnClass !== 'undefined' ? this.pageBtnClass : this.config.pageBtnClass; // base class\n\n        this.itemsPerPage = typeof this.itemsPerPage !== 'undefined' ? this.itemsPerPage : this.config.itemsPerPage;\n        this.totalPages = this.calculateTotalPages(); // this class\n\n        this.pages = this.getPages(this.page, this.totalPages);\n        this.inited = true;\n      }\n      /**\n       * @param {?} value\n       * @return {?}\n       */\n\n    }, {\n      key: \"writeValue\",\n      value: function writeValue(value) {\n        this.page = value;\n        this.pages = this.getPages(this.page, this.totalPages);\n      }\n      /**\n       * @param {?} key\n       * @return {?}\n       */\n\n    }, {\n      key: \"getText\",\n      value: function getText(key) {\n        // tslint:disable-next-line:no-any\n        return (\n          /** @type {?} */\n          this[\"\".concat(key, \"Text\")] ||\n          /** @type {?} */\n          this.config[\"\".concat(key, \"Text\")]\n        );\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"noPrevious\",\n      value: function noPrevious() {\n        return this.page === 1;\n      }\n      /**\n       * @return {?}\n       */\n\n    }, {\n      key: \"noNext\",\n      value: function noNext() {\n        return this.page === this.totalPages;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnChange\",\n      value: function registerOnChange(fn) {\n        this.onChange = fn;\n      }\n      /**\n       * @param {?} fn\n       * @return {?}\n       */\n\n    }, {\n      key: \"registerOnTouched\",\n      value: function registerOnTouched(fn) {\n        this.onTouched = fn;\n      }\n      /**\n       * @param {?} page\n       * @param {?=} event\n       * @return {?}\n       */\n\n    }, {\n      key: \"selectPage\",\n      value: function selectPage(page, event) {\n        if (event) {\n          event.preventDefault();\n        }\n\n        if (!this.disabled) {\n          if (event && event.target) {\n            // tslint:disable-next-line:no-any\n\n            /** @type {?} */\n            var target = event.target;\n            target.blur();\n          }\n\n          this.writeValue(page);\n          this.onChange(this.page);\n        }\n      } // Create page object used in template\n\n      /**\n       * @protected\n       * @param {?} num\n       * @param {?} text\n       * @param {?} active\n       * @return {?}\n       */\n\n    }, {\n      key: \"makePage\",\n      value: function makePage(num, text, active) {\n        return {\n          text: text,\n          number: num,\n          active: active\n        };\n      }\n      /**\n       * @protected\n       * @param {?} currentPage\n       * @param {?} totalPages\n       * @return {?}\n       */\n\n    }, {\n      key: \"getPages\",\n      value: function getPages(currentPage, totalPages) {\n        /** @type {?} */\n        var pages = []; // Default page limits\n\n        /** @type {?} */\n\n        var startPage = 1;\n        /** @type {?} */\n\n        var endPage = totalPages;\n        /** @type {?} */\n\n        var isMaxSized = typeof this.maxSize !== 'undefined' && this.maxSize < totalPages; // recompute if maxSize\n\n        if (isMaxSized) {\n          if (this.rotate) {\n            // Current page is displayed in the middle of the visible ones\n            startPage = Math.max(currentPage - Math.floor(this.maxSize / 2), 1);\n            endPage = startPage + this.maxSize - 1; // Adjust if limit is exceeded\n\n            if (endPage > totalPages) {\n              endPage = totalPages;\n              startPage = endPage - this.maxSize + 1;\n            }\n          } else {\n            // Visible pages are paginated with maxSize\n            startPage = (Math.ceil(currentPage / this.maxSize) - 1) * this.maxSize + 1; // Adjust last page if limit is exceeded\n\n            endPage = Math.min(startPage + this.maxSize - 1, totalPages);\n          }\n        } // Add page number links\n\n\n        for (var num = startPage; num <= endPage; num++) {\n          /** @type {?} */\n          var page = this.makePage(num, num.toString(), num === currentPage);\n          pages.push(page);\n        } // Add links to move between page sets\n\n\n        if (isMaxSized && !this.rotate) {\n          if (startPage > 1) {\n            /** @type {?} */\n            var previousPageSet = this.makePage(startPage - 1, '...', false);\n            pages.unshift(previousPageSet);\n          }\n\n          if (endPage < totalPages) {\n            /** @type {?} */\n            var nextPageSet = this.makePage(endPage + 1, '...', false);\n            pages.push(nextPageSet);\n          }\n        }\n\n        return pages;\n      } // base class\n\n      /**\n       * @protected\n       * @return {?}\n       */\n\n    }, {\n      key: \"calculateTotalPages\",\n      value: function calculateTotalPages() {\n        /** @type {?} */\n        var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);\n        return Math.max(totalPages || 0, 1);\n      }\n    }]);\n\n    return PaginationComponent;\n  }();\n\n  PaginationComponent.ɵfac = function PaginationComponent_Factory(t) {\n    return new (t || PaginationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PaginationConfig), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  PaginationComponent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: PaginationComponent,\n    selectors: [[\"pagination\"]],\n    inputs: {\n      itemsPerPage: \"itemsPerPage\",\n      totalItems: \"totalItems\",\n      maxSize: \"maxSize\",\n      rotate: \"rotate\",\n      boundaryLinks: \"boundaryLinks\",\n      directionLinks: \"directionLinks\",\n      pageBtnClass: \"pageBtnClass\",\n      align: \"align\",\n      firstText: \"firstText\",\n      previousText: \"previousText\",\n      nextText: \"nextText\",\n      lastText: \"lastText\",\n      disabled: \"disabled\",\n      customPageTemplate: \"customPageTemplate\",\n      customNextTemplate: \"customNextTemplate\",\n      customPreviousTemplate: \"customPreviousTemplate\",\n      customFirstTemplate: \"customFirstTemplate\",\n      customLastTemplate: \"customLastTemplate\"\n    },\n    outputs: {\n      numPages: \"numPages\",\n      pageChanged: \"pageChanged\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([PAGINATION_CONTROL_VALUE_ACCESSOR])],\n    decls: 16,\n    vars: 6,\n    consts: [[1, \"pagination\", 3, \"ngClass\"], [\"class\", \"pagination-first page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-prev page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-page page-item\", 3, \"active\", \"disabled\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"pagination-next page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"class\", \"pagination-last page-item\", 3, \"disabled\", 4, \"ngIf\"], [\"defaultPageTemplate\", \"\"], [\"defaultNextTemplate\", \"\"], [\"defaultPreviousTemplate\", \"\"], [\"defaultFirstTemplate\", \"\"], [\"defaultLastTemplate\", \"\"], [1, \"pagination-first\", \"page-item\"], [\"href\", \"\", 1, \"page-link\", 3, \"click\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"pagination-prev\", \"page-item\"], [1, \"pagination-page\", \"page-item\"], [1, \"pagination-next\", \"page-item\"], [1, \"pagination-last\", \"page-item\"]],\n    template: function PaginationComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵtemplate(1, PaginationComponent_li_1_Template, 3, 7, \"li\", 1);\n        ɵngcc0.ɵɵtemplate(2, PaginationComponent_li_2_Template, 3, 7, \"li\", 2);\n        ɵngcc0.ɵɵtemplate(3, PaginationComponent_li_3_Template, 3, 10, \"li\", 3);\n        ɵngcc0.ɵɵtemplate(4, PaginationComponent_li_4_Template, 3, 7, \"li\", 4);\n        ɵngcc0.ɵɵtemplate(5, PaginationComponent_li_5_Template, 3, 7, \"li\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(6, PaginationComponent_ng_template_6_Template, 1, 1, \"ng-template\", null, 6, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(8, PaginationComponent_ng_template_8_Template, 1, 1, \"ng-template\", null, 7, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(10, PaginationComponent_ng_template_10_Template, 1, 1, \"ng-template\", null, 8, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(12, PaginationComponent_ng_template_12_Template, 1, 1, \"ng-template\", null, 9, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(14, PaginationComponent_ng_template_14_Template, 1, 1, \"ng-template\", null, 10, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.classMap);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.boundaryLinks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.directionLinks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.pages);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.directionLinks);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.boundaryLinks);\n      }\n    },\n    dependencies: [ɵngcc1.NgClass, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  /** @nocollapse */\n\n  return PaginationComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nif (false) {\n  /** @type {?} */\n  PaginationComponent.prototype.config;\n  /**\n   * if `true` aligns each link to the sides of pager\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.align;\n  /**\n   * limit number for page links in pager\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.maxSize;\n  /**\n   * if false first and last buttons will be hidden\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.boundaryLinks;\n  /**\n   * if false previous and next buttons will be hidden\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.directionLinks;\n  /**\n   * first button text\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.firstText;\n  /**\n   * previous button text\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.previousText;\n  /**\n   * next button text\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.nextText;\n  /**\n   * last button text\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.lastText;\n  /**\n   * if true current page will in the middle of pages list\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.rotate;\n  /**\n   * add class to <code><li\\></code>\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.pageBtnClass;\n  /**\n   * if true pagination component will be disabled\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.disabled;\n  /**\n   * custom template for page link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customPageTemplate;\n  /**\n   * custom template for next link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customNextTemplate;\n  /**\n   * custom template for previous link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customPreviousTemplate;\n  /**\n   * custom template for first link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customFirstTemplate;\n  /**\n   * custom template for last link\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.customLastTemplate;\n  /**\n   * fired when total pages count changes, $event:number equals to total pages count\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.numPages;\n  /**\n   * fired when page was changed, $event:{page, itemsPerPage} equals to object\n   * with current page index and number of items per page\n   * @type {?}\n   */\n\n  PaginationComponent.prototype.pageChanged;\n  /** @type {?} */\n\n  PaginationComponent.prototype.onChange;\n  /** @type {?} */\n\n  PaginationComponent.prototype.onTouched;\n  /** @type {?} */\n\n  PaginationComponent.prototype.classMap;\n  /** @type {?} */\n\n  PaginationComponent.prototype.pages;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype._itemsPerPage;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype._totalItems;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype._totalPages;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype.inited;\n  /**\n   * @type {?}\n   * @protected\n   */\n\n  PaginationComponent.prototype._page;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PaginationComponent.prototype.elementRef;\n  /**\n   * @type {?}\n   * @private\n   */\n\n  PaginationComponent.prototype.changeDetection;\n}\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nvar PaginationModule = /*#__PURE__*/(function () {\n  var PaginationModule = /*#__PURE__*/function () {\n    function PaginationModule() {\n      _classCallCheck(this, PaginationModule);\n    }\n\n    _createClass(PaginationModule, null, [{\n      key: \"forRoot\",\n      value:\n      /**\n       * @return {?}\n       */\n      function forRoot() {\n        return {\n          ngModule: PaginationModule,\n          providers: []\n        };\n      }\n    }]);\n\n    return PaginationModule;\n  }();\n\n  PaginationModule.ɵfac = function PaginationModule_Factory(t) {\n    return new (t || PaginationModule)();\n  };\n\n  PaginationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: PaginationModule\n  });\n  PaginationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return PaginationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PaginationModule, {\n    declarations: function declarations() {\n      return [PagerComponent, PaginationComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [PagerComponent, PaginationComponent];\n    }\n  });\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n\nexport { PagerComponent, PaginationComponent, PaginationConfig, PaginationModule, PAGER_CONTROL_VALUE_ACCESSOR as ɵa, PAGINATION_CONTROL_VALUE_ACCESSOR as ɵb }; //# sourceMappingURL=ngx-bootstrap-pagination.js.map","map":null,"metadata":{},"sourceType":"module"}