{"ast":null,"code":"import _classCallCheck from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { User } from '../../models/user.model';\nimport { HttpClient } from '@angular/common/http';\nimport { Subject } from 'rxjs';\nimport { SpotifyEndPoints } from './spotifyApiEndpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./spotifyApiEndpoints\"; // import { Subscription } from 'rxjs/Subscription';\n\nexport var UserService = /*#__PURE__*/(function () {\n  var UserService = /*#__PURE__*/function () {\n    function UserService(http, spotifyEndPoints) {\n      _classCallCheck(this, UserService);\n\n      this.http = http;\n      this.spotifyEndPoints = spotifyEndPoints;\n      this.authenticationTokenKey = 'authenticationTokenKey';\n      this.authenticationTokenTypeKey = 'authenticationTokenTypeKey';\n      this.isLoggedIn = false;\n      this.userChanged = new Subject();\n      this.playlistsChanged = new Subject();\n    }\n\n    _createClass(UserService, [{\n      key: \"updateAlbumAddedToPlaylist\",\n      value: function updateAlbumAddedToPlaylist(albumId, playlistName) {\n        var _this = this;\n\n        return new Promise(function (resolve) {\n          _this.http.put('', '').subscribe(function (data) {\n            resolve(true);\n          });\n        });\n      }\n    }, {\n      key: \"getUser\",\n      value: function getUser() {\n        return this.user;\n      }\n    }, {\n      key: \"getDisplayName\",\n      value: function getDisplayName() {\n        return this.user.display_name;\n      }\n    }, {\n      key: \"setUser\",\n      value: function setUser(usr) {\n        this.isLoggedIn = true;\n        this.user = usr;\n      }\n    }, {\n      key: \"getPlaylists\",\n      value: function getPlaylists() {\n        return this.playlists;\n      } // getUserProfilFromSpotify(): Promise<boolean> {\n      //     return new Promise(\n      //         resolve => {\n      //             this.http.get(this.spotifyEndPoints.currentUserProfileEndPoint, { headers: this.spotifyEndPoints.createRequestOptions()}).subscribe(\n      //                 (response: any) => {\n      //                             const res = response.json();\n      //                             // console.log(res);\n      //                             this.setUser(new User('', res.display_name, res.id, res.images));\n      //                             this.userChanged.next(this.getUser());\n      //                             resolve(true);\n      //                 }\n      //             );\n      //         }\n      //     );\n      // }\n\n    }, {\n      key: \"getUserProfilFromBackEnd\",\n      value: function getUserProfilFromBackEnd() {\n        var _this2 = this;\n\n        return new Promise(function (resolve) {\n          _this2.http.get('/api/user/profile').subscribe(function (response) {\n            var res = response['data'];\n\n            _this2.setUser(new User(res._id, res.profile.displayName, res.spotify.id, res.spotify.picture));\n\n            _this2.userChanged.next(_this2.getUser());\n\n            resolve(true);\n          });\n        });\n      }\n    }, {\n      key: \"getUserPlaylistFromSpotify\",\n      value: function getUserPlaylistFromSpotify() {\n        var _this3 = this;\n\n        this.http.get(this.spotifyEndPoints.currentUserPlaylistsEndPoint, {\n          headers: this.spotifyEndPoints.createRequestOptions()\n        }).subscribe(function (response) {\n          _this3.setPlaylists(response['items']);\n        });\n      }\n    }, {\n      key: \"setPlaylists\",\n      value: function setPlaylists(playlistsResponse) {\n        this.playlists = playlistsResponse;\n        this.playlistsChanged.next(this.playlists);\n      }\n    }, {\n      key: \"setSelectedPlaylistById\",\n      value: function setSelectedPlaylistById(playlistId) {\n        this.selectedPlaylistId = playlistId;\n        var playlistIndex = this.playlists.findIndex(function (playlist) {\n          return playlist.id === playlistId;\n        });\n        this.selectedPlaylistName = this.playlists[playlistIndex].name;\n      }\n    }, {\n      key: \"getSelectedPlaylistId\",\n      value: function getSelectedPlaylistId() {\n        return this.selectedPlaylistId;\n      }\n    }, {\n      key: \"getSelectedPlaylistName\",\n      value: function getSelectedPlaylistName() {\n        return this.selectedPlaylistName;\n      }\n    }, {\n      key: \"setSelectedPlaylistName\",\n      value: function setSelectedPlaylistName(playlistName) {\n        this.selectedPlaylistName = playlistName;\n      }\n    }, {\n      key: \"getUserSpotifyId\",\n      value: function getUserSpotifyId() {\n        return this.user.id;\n      }\n    }, {\n      key: \"getUserDbId\",\n      value: function getUserDbId() {\n        return this.user._id;\n      }\n    }, {\n      key: \"isAuthenticated\",\n      value: function isAuthenticated() {\n        return this.isLoggedIn;\n      }\n    }]);\n\n    return UserService;\n  }();\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SpotifyEndPoints));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}