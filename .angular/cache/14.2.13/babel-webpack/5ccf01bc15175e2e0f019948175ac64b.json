{"ast":null,"code":"import _classCallCheck from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { UserService } from './user.service';\nimport { SpotifyEndPoints } from './spotifyApiEndpoints';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./user.service\";\nimport * as i2 from \"./spotifyApiEndpoints\";\nimport * as i3 from \"@angular/common/http\";\nimport * as i4 from \"@angular/router\";\nexport var SpotifyAuthService = /*#__PURE__*/(function () {\n  var SpotifyAuthService = /*#__PURE__*/function () {\n    // authentication = {\n    //     spotify: {\n    //       authenticationUrl: 'https://accounts.spotify.com/authorize',\n    //       clientId: '3ec89e264ee040a1af30921007fbc1c4',\n    //       responseType: 'token',\n    //       redirectUri: '/login',\n    //       scopes: 'playlist-read-private playlist-read-collaborative playlist-modify-public playlist-modify-private user-library-read user-top-read user-read-email user-read-private'\n    //     }\n    //   };\n    function SpotifyAuthService(userService, spotifyEndPoints, http, router) {\n      _classCallCheck(this, SpotifyAuthService);\n\n      this.userService = userService;\n      this.spotifyEndPoints = spotifyEndPoints;\n      this.http = http;\n      this.router = router;\n    } // private createRedirectUri(redirectUri: string): string {\n    //     return window.location.origin + redirectUri;\n    // }\n    // private createSpotifyAuthenticationUrl(): string {\n    //     const spotifyConfig = this.authentication.spotify;\n    //     // tslint:disable-next-line:max-line-length\n    // tslint:disable-next-line:max-line-length\n    //     return `${spotifyConfig.authenticationUrl}?client_id=${spotifyConfig.clientId}&redirect_uri=${this.createRedirectUri(spotifyConfig.redirectUri)}&response_type=${spotifyConfig.responseType}&scope=${encodeURIComponent(spotifyConfig.scopes)}`;\n    // }\n\n\n    _createClass(SpotifyAuthService, [{\n      key: \"authenticateUsingSpotify\",\n      value: function authenticateUsingSpotify() {\n        //    window.location.href = this.createSpotifyAuthenticationUrl();\n        this.router.navigate(['/auth/spotify']);\n      }\n    }, {\n      key: \"onAuthenticationSuccess\",\n      value: function onAuthenticationSuccess(_ref) {\n        var expires_in = _ref.expires_in,\n            access_token = _ref.access_token,\n            token_type = _ref.token_type;\n        this.storeToken(access_token, token_type);\n      }\n    }, {\n      key: \"storeToken\",\n      value: function storeToken(accessToken, tokenType) {\n        window.sessionStorage.setItem(this.spotifyEndPoints.authenticationTokenKey, accessToken);\n        window.sessionStorage.setItem(this.spotifyEndPoints.authenticationTokenTypeKey, tokenType);\n      }\n    }, {\n      key: \"clearToken\",\n      value: function clearToken() {\n        window.sessionStorage.removeItem(this.spotifyEndPoints.authenticationTokenKey);\n        window.sessionStorage.removeItem(this.spotifyEndPoints.authenticationTokenTypeKey);\n        this.userService.isLoggedIn = false;\n      }\n    }, {\n      key: \"getToken\",\n      value: function getToken() {\n        var access_token = window.sessionStorage.getItem(this.spotifyEndPoints.authenticationTokenKey);\n        var token_type = window.sessionStorage.getItem(this.spotifyEndPoints.authenticationTokenTypeKey);\n        var expires_in = '';\n        return {\n          access_token: access_token,\n          token_type: token_type,\n          expires_in: expires_in\n        };\n      }\n    }, {\n      key: \"retrieveTokenFromServer\",\n      value: function retrieveTokenFromServer() {\n        var _this = this;\n\n        this.http.get('/auth/spotify/token') // .pipe(map((token: string) => token))\n        .subscribe(function (token) {\n          if (token) {\n            _this.storeToken(token, 'Bearer');\n\n            _this.userService.getUserProfilFromBackEnd().then(function (resp) {\n              _this.userService.getUserPlaylistFromSpotify();\n\n              _this.router.navigate(['/']);\n            });\n          }\n        }, function (err) {\n          _this.router.navigate(['/']);\n        });\n      }\n    }]);\n\n    return SpotifyAuthService;\n  }();\n\n  SpotifyAuthService.ɵfac = function SpotifyAuthService_Factory(t) {\n    return new (t || SpotifyAuthService)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.SpotifyEndPoints), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i4.Router));\n  };\n\n  SpotifyAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyAuthService,\n    factory: SpotifyAuthService.ɵfac\n  });\n  return SpotifyAuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}