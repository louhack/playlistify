{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/loich/Dev/Repos/playlistify/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { UserService } from './user.service';\nimport { SpotifyEndPoints } from './spotifyApiEndpoints';\nimport { MessageService } from '../local/message.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user.service\";\nimport * as i3 from \"./spotifyApiEndpoints\";\nimport * as i4 from \"../local/message.service\";\nexport var SpotifyApiService = /*#__PURE__*/(function () {\n  var SpotifyApiService = /*#__PURE__*/function () {\n    function SpotifyApiService(http, userService, spotifyEndPoints, messageService) {\n      _classCallCheck(this, SpotifyApiService);\n\n      this.http = http;\n      this.userService = userService;\n      this.spotifyEndPoints = spotifyEndPoints;\n      this.messageService = messageService;\n    }\n\n    _createClass(SpotifyApiService, [{\n      key: \"searchItem\",\n      value: function searchItem(query, searchType) {\n        var searchReq = this.spotifyEndPoints.searchItemEndPoint + '?q=' + encodeURI(query) + '&type=' + searchType;\n        return this.http.get(searchReq, {\n          headers: this.spotifyEndPoints.createRequestOptions()\n        }).pipe(map(function (albums) {\n          return albums['albums'].items;\n        }));\n      }\n    }, {\n      key: \"addAlbumToPlaylist\",\n      value: function addAlbumToPlaylist(spotifyAlbumId, playlistId) {\n        var _this = this;\n\n        return new Promise(function (resolve) {\n          _this.getTracksFromSpotify(spotifyAlbumId).subscribe(function (tracks) {\n            _this.addTracksToPlaylist(tracks, _this.userService.getSelectedPlaylistId()).subscribe(function (value) {\n              resolve(true);\n            });\n          });\n        });\n      }\n    }, {\n      key: \"getTracksFromSpotify\",\n      value: function getTracksFromSpotify(spotifyAlbumId) {\n        var _this2 = this;\n\n        var req = encodeURI(this.spotifyEndPoints.getAlbumTracksEndPoint.replace('{id}', spotifyAlbumId));\n        return this.http.get(req, {\n          headers: this.spotifyEndPoints.createRequestOptions()\n        }).pipe(map(function (r) {\n          return _this2.spotifyMap(r);\n        }));\n      }\n    }, {\n      key: \"addTracksToPlaylist\",\n      value: function addTracksToPlaylist(tracks, playlistId) {\n        var tracksList = [];\n\n        var _iterator = _createForOfIteratorHelper(tracks),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var track = _step.value;\n            tracksList.push(track.uri);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var apiEndPoint = this.spotifyEndPoints.addTrackToPlaylistEndPoint.replace('{playlist_id}', playlistId).replace('{user_id}', this.userService.getUserSpotifyId());\n        var request = encodeURI(apiEndPoint);\n        var body = {\n          'uris': tracksList\n        };\n        return this.http.post(request, JSON.stringify(body), {\n          headers: this.spotifyEndPoints.createRequestOptions()\n        }).pipe(map(function (response) {\n          return response;\n        }));\n      }\n    }, {\n      key: \"createPlaylistSpotify\",\n      value: function createPlaylistSpotify(playlistName) {\n        var req = encodeURI(this.spotifyEndPoints.createPlaylistEndPoint.replace('{user_id}', this.userService.getUserSpotifyId()));\n        var body = {\n          'name': playlistName\n        };\n        return this.http.post(req, JSON.stringify(body), {\n          headers: this.spotifyEndPoints.createRequestOptions()\n        }).pipe(map(function (response) {\n          return response;\n        }));\n      }\n    }, {\n      key: \"spotifyMap\",\n      value: function spotifyMap(res) {\n        return res.items;\n      }\n      /**\n      * Handle Http operation that failed.\n      * Let the app continue.\n      * @param operation - name of the operation that failed\n      * @param result - optional value to return as the observable result\n      */\n\n    }, {\n      key: \"handleError\",\n      value: function handleError() {\n        var _this3 = this;\n\n        var operation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'operation';\n        var result = arguments.length > 1 ? arguments[1] : undefined;\n        return function (error) {\n          // TODO: send the error to remote logging infrastructure\n          console.error(error); // log to console instead\n          // TODO: better job of transforming error for user consumption\n\n          _this3.log(\"\".concat(operation, \" failed: \").concat(error.message)); // Let the app keep running by returning an empty result.\n\n\n          return of(result);\n        };\n      }\n      /** Log a spotifyAPIService message with the MessageService */\n\n    }, {\n      key: \"log\",\n      value: function log(message) {\n        this.messageService.add('SpotifyAPIService: ' + message);\n      }\n    }]);\n\n    return SpotifyApiService;\n  }();\n\n  SpotifyApiService.ɵfac = function SpotifyApiService_Factory(t) {\n    return new (t || SpotifyApiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserService), i0.ɵɵinject(i3.SpotifyEndPoints), i0.ɵɵinject(i4.MessageService));\n  };\n\n  SpotifyApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpotifyApiService,\n    factory: SpotifyApiService.ɵfac\n  });\n  return SpotifyApiService;\n})();","map":null,"metadata":{},"sourceType":"module"}